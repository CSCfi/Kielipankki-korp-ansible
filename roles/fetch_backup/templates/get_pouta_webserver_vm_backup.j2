#!/bin/bash

# restart as user backup (from root)
if [ "$(id -u)" -eq 0 ]; then
    exec sudo -H -u backup $0 "$@"
fi

# get_pouta_lamp_vm_backup
# backs up lamp/tomcat servers, (e.g. portal, metashare, webanno, specified by $SERVER_IPS) using $BACKUP_GLOB to $LOCAL_BACKUP_DIR

# One way to get IPs: openstack server list|egrep "webanno|portal|metashare"|cut -f 5 -d"|"|cut -f3 -d " "
SERVER_IPS="{{ portal_server_ip }} {{ metashare_server_ip }} {{ webanno_server_ip}}"

# on Korp2:
LOCAL_BACKUP_DIR="/var/backup"

# on lamp machines:
BACKUP_GLOB='/var/backup/*backup.tar.gz'

LOG_MESSAGE_FILE=/tmp/get_pouta_backup.txt

# remove possible last log file
rm -f $LOG_MESSAGE_FILE

# stderr to stdout:
exec > $LOG_MESSAGE_FILE
exec 2>&1


if ! [ -d $LOCAL_BACKUP_DIR/ ]; then
  echo "Backup of cPouta failed."
  echo "Local backup directory \"$LOCAL_BACKUP_DIR\" does not exist."
else
  for IP in $SERVER_IPS; do
      SERVER_NAME=`ssh backup@$IP hostname`

      NEWEST_BACKUP=`ssh backup@$IP "ls -rt $BACKUP_GLOB |tail -n 1"`
      BACKUP_FILE=`basename $NEWEST_BACKUP` 
      LOCAL_BACKUP_FILE=$LOCAL_BACKUP_DIR/$BACKUP_FILE

      if [ -f $LOCAL_BACKUP_FILE ]; then
        if [ -n "$(find $LOCAL_BACKUP_FILE -mtime -1)" ]; then
          echo
	  echo "When backing up \"$SERVER_NAME\" ($IP):"
	  echo "Local copy of \"$LOCAL_BACKUP_FILE\" is too recent."
	  echo "Output of stat:"
	  echo
	  stat $LOCAL_BACKUP_FILE
	fi
      fi

      scp -qp backup@$IP:$NEWEST_BACKUP $LOCAL_BACKUP_DIR

      if ! [ -n "$(find $LOCAL_BACKUP_FILE -mtime -1)" ]; then
        echo
        echo "When backing up \"$SERVER_NAME\" ($IP):"
        echo "Backup \"$LOCAL_BACKUP_FILE\" is too old."
        echo "Output of stat:"
        echo
        stat $LOCAL_BACKUP_FILE
        echo

      fi
      # check integrity once more
      if ! tar tfz $LOCAL_BACKUP_FILE > /dev/null; then
        echo
        echo "Error when backing up \"$SERVER_NAME\" ($IP)."
        echo
      fi
  done;
fi # ! [ -d $LOCAL_BACKUP_DIR/ ]

# mails error message and optionally log file
# $1: Error message
# $2: Path to file
mail_log() {
RECIPIENT=root # Use .forward to forward root's mail if needed.
   if [ -n $2 ]; then # mail the file content
       cat $2 | mail -s "$0 @ `hostname -f`: $1" $RECIPIENT
   else
       echo "(No mail content)"  | mail -s "$0 @ `hostname -f`: $1"  $RECIPIENT
   fi
}


# mail error if logfile does not exist
if [ ! -e $LOG_MESSAGE_FILE ]; then
   mail_log "No logfile!" "In normal operation, an empty logfile should have been created."
fi

# mail errors if the logfile is not empty
if [ -s $LOG_MESSAGE_FILE ]; then
   mail_log "Error. See mail body for details" $LOG_MESSAGE_FILE
fi
