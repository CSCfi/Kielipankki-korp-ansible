---
# Setup korp backend

- name: Set timezone
  community.general.timezone:
    name: "{{ timezone }}"

- name: Add gunicorn user
  ansible.builtin.user:
    name: gunicorn
    state: present

- name: "add clarin group"
  ansible.builtin.group:
    name: clarin
    state: present

- name: Install CWB compile environment
  ansible.builtin.dnf:
    name:
      - subversion
      - make
      - gcc
      - flex
      - bison
      - ncurses-devel
      - readline-devel
      - pcre-devel
      - glib2-devel
      - perl
    state: present

- name: Install korp backend packages
  ansible.builtin.dnf:
    name:
      - git
      - python3
      - python3-wheel
      - python3-devel
      - python3-setuptools
      - python3-virtualenv
      - memcached
      - libmemcached-awesome-devel
      - mariadb
      - mariadb-devel
      - python-xlwt # for korp_download.cgi

- name: Create directories
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    mode: "{{ item.mode }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
  loop: "{{ mk_directories }}"

- name: symlink /v subdirs to /data1
  ansible.builtin.file:
    src: "/data1/{{ item.src }}"
    dest: "/v/{{ item.dest }}"
    owner: root
    group: root
    state: link
  loop:
    - src: korp
      dest: korp
    - src: cwbdata/corpora
      dest: corpora

- name: Clone backend
  ansible.builtin.git:
    repo: "{{ korp_backend_repo  }}"
    version: "{{ korp_backend_version }}"
    dest: "{{ korp_backend_home }}"
    umask: "0022"

- name: Clone CWB subversion
  ansible.builtin.subversion:
    repo: "{{ cwb_svn_repo }}"
    dest: "{{ cwb_compile_root }}"
    revision: "{{ cwb_revision }}"

- name: Copy cwb site config
  ansible.builtin.template:
    src: cwb_korp
    dest: "{{ cwb_compile_root }}/config/site/cwb_korp"
    mode: "0644"

- name: Compile/Install cwb
  community.general.make:
    chdir: "{{ cwb_compile_root }}"
    target: "{{ item }}"
    params:
      PLATFORM: linux-64
      SITE: cwb_korp
  loop:
    - clean
    - depend
    - all
    - install
  become: true

- name: Install pip
  ansible.builtin.pip:
    name: pip
    state: latest
    virtualenv: "{{ korp_backend_venv }}"
    virtualenv_python: python3
    umask: "0022"

- name: Install requirements
  ansible.builtin.pip:
    requirements: "{{ korp_backend_home }}/requirements.txt"
    virtualenv: "{{ korp_backend_venv }}"
    virtualenv_python: python3
    umask: "0022"

- name: Checkout worktrees
  ansible.builtin.shell:
    cmd: "umask 0022 && git worktree add -f {{ item }}"
    chdir: "{{ korp_backend_home }}"
    creates: "{{ item.split(' ')[0] }}/.git"
  loop:
    - "{{ korp_backend_auth_home }} {{ korp_backend_auth_version }}"
    - "{{ korp_backend_plugin_home }} {{ korp_backend_plugin_version }}"

- name: Switch to correct branch for worktrees even if branch has changed since first install
  ansible.builtin.shell:
    cmd: "git checkout {{ item.branch }}"
    chdir: "{{ item.worktree_dir }}"
  loop:
    - {
      worktree_dir: "{{ korp_backend_auth_home }}",
      branch: "{{ korp_backend_auth_version }}"
    }
    - {
      worktree_dir: "{{ korp_backend_plugin_home }}",
      branch: "{{ korp_backend_plugin_version }}"
    }

- name: Remove local changes in worktrees
  ansible.builtin.shell:
    cmd: "umask 0022 && git checkout -f && git pull"
    chdir: "{{ item }}"
  loop:
    - "{{ korp_backend_auth_home }}"
    - "{{ korp_backend_plugin_home }}"
  notify:
    - restart korp-backend
    - restart korp-authserver

- name: Enable default configs for some plugins
  ansible.builtin.file:
    src: "{{ korp_backend_plugin_home }}/korpplugins/{{ item }}/config.py.template"
    dest: "{{ korp_backend_plugin_home }}/korpplugins/{{ item }}/config.py"
    state: link
    mode: "0644"
  loop:
    - charcoder
    - contenthider
    - lemgramcompleter
  notify:
    - restart korp-backend

- name: Install custom configs for other plugins
  ansible.builtin.template:
    src: "{{ item }}_plugin_config.py"
    dest: "{{ korp_backend_plugin_home }}/korpplugins/{{ item }}/config.py"
    mode: "0644"
  loop:
    - logger
    - protectedcorporadb
  notify:
    - restart korp-backend

- name: Install backend config
  ansible.builtin.template:
    src: backend_config.py
    dest: "{{ korp_backend_home }}/config.py"
    mode: "0644"
  notify:
    - restart korp-backend

- name: Install auth server config
  ansible.builtin.template:
    src: authserver_config.py
    dest: "{{ korp_backend_auth_home }}/auth/config.py"
    mode: "0644"
  notify:
    - restart korp-authserver

- name: Install korp-authdb.py dependencies
  ansible.builtin.dnf:
    name:
      - python3-mysqlclient
    state: present

- name: Set up korp-authdb.py directory
  ansible.builtin.file:
    path: /usr/local/bin/korp-authdb/
    state: directory
    owner: root
    mode: "0755"

- name: Install korp-authdb.py scripts
  ansible.builtin.copy:
    src: "{{ item.filename }}"
    dest: /usr/local/bin/korp-authdb/
    mode: "{{ item.mode }}"
  loop:
    - filename: "korp-authdb.py"
      mode: "0755"
    - filename: "create-new-korp-authdb-DANGER-ERASES-EXISTING.sql"
      mode: "0644"

- name: Install korp-authdb.py configuration
  ansible.builtin.template:
    src: korp_authdb_config.py.j2
    dest: /usr/local/bin/korp-authdb/korp_authdb_config.py
    mode: "0644"

- name: Symlink korp-authdb.py to $PATH
  ansible.builtin.file:
    src: /usr/local/bin/korp-authdb/korp-authdb.py
    dest: /usr/local/bin/korp-authdb.py
    owner: root
    group: root
    state: link

- name: Install latest gevent
  ansible.builtin.pip:
    name: gevent
    state: latest
    virtualenv: "{{ korp_backend_venv }}"
    virtualenv_python: python3
    umask: "0022"
  notify:
    - restart korp-backend
    - restart korp-authserver

- name: Install gunicorn / start backend
  ansible.builtin.pip:
    name: gunicorn
    state: latest
    virtualenv: "{{ korp_backend_venv }}"
    virtualenv_python: python3
    umask: "0022"
  notify:
    - restart korp-backend
    - restart korp-authserver

- name: Install systemd templates
  template:
    src: "{{ item }}"
    dest: "/etc/systemd/system/{{ item }}"
    owner: root
    group: root
    mode: "0640"
  loop:
    - korp-backend.socket
    - korp-backend.service
    - korp-authserver.service
  notify:
    - restart systemd

- name: Enable korp services
  ansible.builtin.systemd_service:
    state: started
    enabled: true
    name: "{{ item }}"
  loop:
    - korp-backend.service
    - korp-authserver.service

- name: Install daily crontab scripts
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "/etc/cron.daily/"
    owner: root
    group: root
    mode: "0755"
  loop:
    - clear_korp_cache

- name: Install old API / korp_download.cgi
  ansible.builtin.copy:
    src: korp_download/
    dest: "{{ korp_backend_cgibin_dir }}"
    owner: root
    group: apache
    mode: "0755"

- name: Precompile python files
  ansible.builtin.shell:
    cmd: find -name \*.py -exec python3 -m py_compile  {} \;
    chdir: "{{ korp_backend_cgibin_dir }}/korpexport"

- name: Install old API config
  ansible.builtin.template:
    src: korp_cgi_config.py
    dest: "{{ korp_backend_cgibin_dir }}/korp_config.py"
    owner: root
    group: apache
    mode: "0640"

- name: Configure CGI script location for Apache
  ansible.builtin.lineinfile:
    path: /etc/httpd/conf.d/cgi.conf
    line: "ScriptAlias /korp/cgi-bin/ {{ korp_static_frontend_cgi_dir }}/"
    state: present
    create: true
    mode: "0644"
  notify: restart korp-backend

- name: configure logrotate for backend
  ansible.builtin.template:
    src: "korp_logrotate"
    dest: "/etc/logrotate.d/korp"
