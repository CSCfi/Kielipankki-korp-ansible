---
# Setup korp backend

- name: Install CWB compile environment
  ansible.builtin.dnf:
    name:
      - subversion
      - make
      - gcc
      - flex
      - bison
      - ncurses-devel
      - readline-devel
      - pcre-devel
      - glib2-devel
      - perl
    state: present

- name: Install korp backend packages
  ansible.builtin.dnf:
    name:
      - git
      - python3
      - python3-wheel
      - python3-devel
      - python3-setuptools
      - python3-virtualenv
      - memcached
      - libmemcached-awesome-devel
      - mariadb
      - mariadb-devel
      - python-xlwt # for korp_download.cgi

- name: Create base directories
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    mode: "{{ item.mode }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
  loop: "{{ mk_base_directories }}"

- name: symlink /v subdirs to /data1
  ansible.builtin.file:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    state: link
  loop: "{{ v_to_data1_symlinks }}"

- name: Create additional directories
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    mode: "{{ item.mode }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
  loop: "{{ mk_additional_directories }}"

- name: Clone backend
  ansible.builtin.git:
    repo: "{{ korp_backend_repo  }}"
    version: "{{ korp_backend_version }}"
    dest: "{{ korp_backend_home }}"
    umask: "0022"

- name: Clone Kielipankki scripts
  ansible.builtin.git:
    repo: "{{ kp_util_scripts_repo }}"
    dest: "{{ kp_util_scripts_home }}"

- name: Clone CWB subversion
  ansible.builtin.subversion:
    repo: "{{ cwb_svn_repo }}"
    dest: "{{ cwb_compile_root }}"
    revision: "{{ cwb_revision }}"

- name: Copy cwb site config
  ansible.builtin.template:
    src: cwb_korp
    dest: "{{ cwb_compile_root }}/config/site/cwb_korp"
    mode: "0644"

- name: Compile/Install cwb
  community.general.make:
    chdir: "{{ cwb_compile_root }}"
    target: "{{ item }}"
    params:
      PLATFORM: linux-64
      SITE: cwb_korp
  loop:
    - clean
    - depend
    - all
    - install
  become: true

- name: Install pip
  ansible.builtin.pip:
    name: pip
    state: latest
    virtualenv: "{{ korp_backend_venv }}"
    virtualenv_python: python3
    umask: "0022"

- name: Install requirements
  ansible.builtin.pip:
    requirements: "{{ korp_backend_home }}/requirements.txt"
    virtualenv: "{{ korp_backend_venv }}"
    virtualenv_python: python3
    umask: "0022"

- name: Set up Kielipankki-korp structure
  when: not future_build
  include_tasks:
    file: kielipankki-korp-backend-code.yaml

- name: Install latest gevent
  ansible.builtin.pip:
    name: gevent
    state: latest
    virtualenv: "{{ korp_backend_venv }}"
    virtualenv_python: python3
    umask: "0022"
  notify:
    - restart korp-backend
    - restart korp-authserver

- name: Install gunicorn / start backend
  ansible.builtin.pip:
    name: gunicorn
    state: latest
    virtualenv: "{{ korp_backend_venv }}"
    virtualenv_python: python3
    umask: "0022"
  notify:
    - restart korp-backend
    - restart korp-authserver

# The following two worktree tasks have been copied from
# kielipankki-korp-backend-code.yaml and modified to use variable
# korp_backend_worktrees; they could perhaps be used for both types of
# build if the variable were set appropriately also for the
# Kielipankki build.

- name: Checkout backend worktrees
  when: future_build
  ansible.builtin.shell:
    cmd: "umask 0022 && git worktree add -f {{ item.worktree_dir }} {{ item.branch }}"
    chdir: "{{ korp_backend_home }}"
    creates: "{{ item.worktree_dir }}/.git"
  loop: "{{ korp_backend_worktrees }}"

- name: Remove local changes and switch to correct branch for worktrees
  when: future_build
  ansible.builtin.shell:
    cmd: "git fetch && git reset --hard @{upstream} && git checkout {{ item.branch }}"
    chdir: "{{ item.worktree_dir }}"
  loop: "{{ korp_backend_worktrees }}"
  notify:
    - restart korp-backend

- name: Make new-style instance configuration dir
  when: future_build
  ansible.builtin.file:
    state: directory
    path: "{{ korp_backend_home }}/{{ item }}"
    owner: gunicorn
    group: gunicorn
  loop:
    - instance

- name: Install backend configuration
  when: future_build
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: gunicorn
    group: gunicorn
    mode: "0640"
  loop:
    - src: "future/config.py.j2"
      dest: "{{ korp_backend_home }}/instance/config.py"

- name: Make corpus configuration dirs
  when: future_build
  ansible.builtin.file:
    state: directory
    path: "{{ korp_corpus_config_dir }}/{{ item }}"
    owner: gunicorn
    group: gunicorn
  loop:
    # Corpus configuration root directory
    - ""
    - modes
    - corpora
    - attributes

- name: Install corpus configuration modes and attributes
  when: future_build
  ansible.builtin.copy:
    src: "{{ korp_backend_corpusconfigs_home }}/{{ item }}/"
    dest: "{{ korp_corpus_config_dir }}/{{ item }}/"
    remote_src: true
    owner: gunicorn
    group: gunicorn
  loop:
    - modes
    - attributes

- name: Install corpus configurations
  when: future_build
  ansible.builtin.copy:
    src: "{{ korp_backend_corpusconfigs_home }}/corpora/{{ item }}.yaml"
    dest: "{{ korp_corpus_config_dir }}/corpora/"
    remote_src: true
    owner: gunicorn
    group: gunicorn
    mode: "0640"
  loop: "{{ korp_corpora }}"

- name: Install systemd templates
  template:
    src: "{{ item }}"
    dest: "/etc/systemd/system/{{ item }}"
    owner: root
    group: root
    mode: "0640"
  loop:
    - korp-backend.socket
    - korp-backend.service
    - korp-authserver.service
  notify:
    - restart systemd
  when: not future_build or item is not search("authserver")

- name: Enable korp services
  ansible.builtin.systemd_service:
    state: started
    enabled: true
    name: "{{ item }}"
  loop:
    - korp-backend.service
    - korp-authserver.service
  when: not future_build or item is not search("authserver")

- name: Install daily crontab scripts
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "/etc/cron.daily/"
    owner: root
    group: root
    mode: "0755"
  loop:
    - clear_korp_cache

- name: Install old API / korp_download.cgi
  when: not future_build
  ansible.builtin.copy:
    src: korp_download/
    dest: "{{ korp_backend_cgibin_dir }}"
    owner: root
    group: apache
    mode: "0755"

- name: Precompile python files
  when: not future_build
  ansible.builtin.shell:
    cmd: find -name \*.py -exec python3 -m py_compile  {} \;
    chdir: "{{ korp_backend_cgibin_dir }}/korpexport"

- name: Install old API config
  when: not future_build
  ansible.builtin.template:
    src: korp_cgi_config.py
    dest: "{{ korp_backend_cgibin_dir }}/korp_config.py"
    owner: root
    group: apache
    mode: "0640"

- name: Configure CGI script location for Apache
  when: not future_build
  ansible.builtin.lineinfile:
    path: /etc/httpd/conf.d/cgi.conf
    line: "ScriptAlias /korp/cgi-bin/ {{ korp_static_frontend_cgi_dir }}/"
    state: present
    create: true
    mode: "0644"
  notify: restart korp-backend

- name: Install rsyslog configuration and logging README
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "0644"
  loop:
    - src: 11-korp-py.conf
      dest: /etc/rsyslog.d/11-korp-py.conf
    - src: LOG_README.md
      dest: /var/log/korp/README.md
    - src: LOG_README.md
      dest: /v/korp/log/README.md
  notify: restart rsyslog

- name: configure logrotate for backend
  ansible.builtin.template:
    src: "korp_logrotate"
    dest: "/etc/logrotate.d/korp"
